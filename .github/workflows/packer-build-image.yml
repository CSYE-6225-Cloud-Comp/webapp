name: Build Packer Template
# on:
#     pull_request:
#         types:
#             - closed
on: [pull_request]
jobs:
    if-merged:
        if: github.event.pull_request.merged == false
        runs-on: ubuntu-latest
        env:
            DB_HOST: ${{ vars.DB_HOST }}
            DB_PORT: ${{ vars.DB_PORT }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_SCHEMA: ${{ vars.DB_SCHEMA }}
            DB_DIALECT: ${{ vars.DB_DIALECT }}
            DB_TIMEZONE: ${{ vars.DB_TIMEZONE }}  
            GITHUB_WORKSPACE: ${{ github.workspace }}
            PRODUCT_VERSION: "latest"
            GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
            SERVER_PORT: ${{ vars.SERVER_PORT }}
            VM_DB_USER: ${{ secrets.VM_DB_USER }}
            VM_DB_PASSWORD: ${{ secrets.VM_DB_PASSWORD }}
            INSTANCE_TEMPLATE_VERSION: ${{ vars.INSTANCE_TEMPLATE_VERSION }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - id: 'auth'
              uses: 'google-github-actions/auth@v2'
              with:
                credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      
            - name: 'Set up Cloud SDK'
              uses: 'google-github-actions/setup-gcloud@v2'
      
            - name: 'Use gcloud CLI'
              run: 'gcloud info'

            - name: Setup MYSQL
              run: |
                sudo /lib/systemd/systemd-sysv-install enable mysql
                sudo systemctl enable mysql.service
                sudo systemctl start mysql.service
                sudo systemctl status mysql.service
                sudo mysql --user=$DB_USER --password=$DB_PASSWORD -e "CREATE DATABASE $DB_SCHEMA"

            # - name: Create .env file
            #   run: |
            #     touch $GITHUB_WORKSPACE/.env
            #     echo "DB_HOST=$DB_HOST" >> .env
            #     echo "DB_PORT=$DB_PORT" >> .env
            #     echo "DB_USER=$VM_DB_USER" >> .env
            #     echo "DB_PASSWORD=$VM_DB_PASSWORD" >> .env
            #     echo "DB_SCHEMA=$DB_SCHEMA" >> .env
            #     echo "DB_DIALECT=$DB_DIALECT" >> .env
            #     echo "DB_TIMEZONE=$DB_TIMEZONE" >> .env
            #     echo "GCP_CREDENTIALS=$GCP_CREDENTIALS" >> .env
            #     echo "SERVER_PORT=$SERVER_PORT" >> .env
            #     cat .env

            - name: Zip Repository
              run: zip -r webapp.zip .
               .
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '18.x'

            - name: Install Dependencies
              run: npm install

            - name: Create a directory 
              working-directory: /var/log
              run: |
                sudo mkdir webapp

            - name: Run Integration Tests
              run: npm test 

            - name: Setup `packer`
              uses: hashicorp/setup-packer@main
              id: setup
              with:
                version: ${{ env.PRODUCT_VERSION }}
              
            - name: Initialize Packer
              run: packer init $GITHUB_WORKSPACE/packer/centos.pkr.hcl

            # - name: Build Packer Template
            #   run: packer build $GITHUB_WORKSPACE/packer/centos.pkr.hcl

            - name: Get the image ID
              run: |
                echo "image_id=$(gcloud compute images list --format="value(NAME)" --project "tf-gcp-infra" --no-standard-images --sort-by=~creationTimestamp --limit=1)" >> "$GITHUB_ENV"
            - name: Get image id value
              run: |
                printf '%s\n' "Image ID : $image_id"
            
            - name: Store secrets in env
              run: |
                echo "db_host=$(gcloud secrets versions access latest --secret="db_ip")" >> "$GITHUB_ENV"
                echo "db_password=$(gcloud secrets versions access latest --secret="db_password")" >> "$GITHUB_ENV"
                echo "db_schema=$(gcloud secrets versions access latest --secret="db_schema")" >> "$GITHUB_ENV"
                echo "db_user=$(gcloud secrets versions access latest --secret="db_user")" >> "$GITHUB_ENV"

            - name: Print secret values
              run: |
                printf '%s\n' "IP: $db_host"
            
            # - name: Create a VM instance template
            #   run: |
            #     gcloud compute instance-templates create webapp-instance-template \
            #       --instance-template-region=us-east1 \
            #       --boot-disk-auto-delete=true \
            #       --boot-disk-
            #       --image=projects/tf-gcp-infra/global/images/$image_id \
            #       --machine-type=n1-standard-1 \
            #       --network-interface=[network-tier=PREMIUM,network=terraform-vpc,subnetwork=webapp] \
            #       --maintenance-policy=MIGRATE \
            #       --provisioning-model=STANDARD \
            #       --service-account=$GCP_CREDENTIALS \
            #       --tags=[webapp,allow-health-check,deny-webapp-traffic]
            #       --scopes[cloud-platform]
            #       --metadata-from-file=startup-script=$GITHUB_WORKSPACE/packer/scripts/startup.sh

            - name: Create a VM instance template
              run: |
                gcloud compute instance-templates create webapp-instance-template \
                  --instance-template-region=us-east1 \
                  --boot-disk-type=pd-balanced \
                  --boot-disk-size=100GB \
                  --image=projects/tf-gcp-infra/global/images/$image_id \
                  --machine-type=e2-medium \
                  --network-interface=network-tier=PREMIUM,network=terraform-vpc,subnetwork=webapp \
                  --maintenance-policy=MIGRATE \
                  --provisioning-model=STANDARD \
                  --service-account=$GCP_CREDENTIALS \
                  --tags=webapp,allow-health-check,deny-webapp-traffic
                  --scopes=cloud-platform \
                  --service-account=compute-engine-service-account@tf-gcp-infra.iam.gserviceaccount.com \
                  --metadata=startup-script=<<-EOT
                    #!/bin/bash
                    cd /opt/webapp
              
                    if [ ! -f /opt/webapp/.env ]; then
                        touch /opt/webapp/.env
                        echo DB_HOST=$db_host >> .env
                        echo DB_PORT=3306 >> .env
                        echo DB_USER=$db_user >> .env
                        echo DB_PASSWORD=$db_password >> .env
                        echo DB_SCHEMA=$db_schema >> .env
                        echo DB_TIMEZONE=-05:00 >> .env
                        echo PORT=3000 >> .env
                        cat .env
                    else 
                      if [ ! -s /opt/webapp/.env ]; then
                        echo DB_HOST=$db_host >> .env
                        echo DB_PORT=3306 >> .env
                        echo DB_USER=$db_user >> .env
                        echo DB_PASSWORD=$db_password >> .env
                        echo DB_SCHEMA=$db_schema >> .env
                        echo DB_TIMEZONE=-05:00 >> .env
                        echo PORT=3000 >> .env
                        cat .env
                      fi
                    fi
              
                  EOT

            - name: Set new instance template to the existing instance group
              run: |
                gcloud compute instance-groups managed set-instance-template lb-backend-example \
                  --template=webapp-instance-template \
                  --region=us-east1 
            
            # - name: Recreate instances
            #   run: |
            #     gcloud compute instance-groups managed recreate-instances webapp-instance-group \
            #       --instances=webapp-instance-group \
            #       --zone=us-east1-b

            - name: Recreate instances
              run: |
                gcloud compute instance-groups managed rolling-action start-update lb-backend-example \
                  --version=instance-template=webapp-instance-template \
                  --region=us-east1
                  --replacement-method=RECREATE
            
            - name: Wait until the instance group refreshes
              run: |
                gcloud compute instance-groups managed wait-until --version-target-reached lb-backend-example \
                  --region=us-east1